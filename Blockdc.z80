;====================================================================================
;
;					ARKANOID 83+ (Block draw routine)
;Started: 	November 17th 2002
;By:		Patrick Armstrong
;
;
;====================================================================================
;
;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;
;
;		Code flagged with !'s below must be removed before code 
;		is integrated into full project.
;		(it is redundant)
;
;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;
;		PROGRESS
;
;	blank out blocks hit:		80%
;		left: have to make it kill blocks hit from top and sides
;	
;	Identify if block exists:	50%
;		left: still need to read from mem 
;			if it's there
;	
;
;
;



;.NOLIST
;#define     equ             .equ
;#define     EQU             .equ
;#define     END             .end
;#include "t83pASM.inc"				;General TI-83 Plus include file
;#include "mirages.inc"			;MirageOS include file
				
;#DEFINE ballx saferam1
;#define bally saferam1+1
;#define balld saferam1+2
;#define paddx saferam1+3
;#define paddy saferam1+4
;#define matrixloopx saferam1+5
;#define matrixloopy saferam1+6
;#define matrixyval saferam1+7
;#define Exitcounter saferam1+8

;.LIST

;	.org	$9d93				;Origin (set back two to account for AsmPrgm)
;	.db	$BB,$6D				;Compiled AsmPrgm token
;	ret					;So TIOS wont run the program
;	.db	1				;Identifier as MirageOS program
;	.db	11111111b,11111111b
;	.db	11100000b,00001111b
;	.db	11010000b,00111111b
;	.db	11110011b,11111111b
;	.db	00101110b,00111111b
;	.db	11111111b,11111011b
;	.db	11001100b,00000011b
;	.db	11010100b,11000011b
;	.db	11100001b,10000011b
;	.db	11111111b,10000111b
;	.db	11001110b,00001111b
;	.db	11010001b,00111011b
;	.db	11110001b,01111111b
;	.db	11111110b,01111111b
;	.db	11111111b,11111111b
;	.db	"What are you doing Zorak?",0
;
;
;
;
;	B_CALL(_clrLCDFull)			;Clear the screen.
;	SET fullScrnDraw, (IY + apiFlg4)	;allow write to col 95 row 0
;	RES indiconly, (IY+indicflags)		;make sure keys are scanned
;	
;	
;¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
;	Get X and Y values from ram
;	¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯

	ld a,0
	ld b,0
	ld c,0
	ld a,(ballx)
	ld b,a
	ld a,(bally)
	ld c,a


;_________________________________________________
;
;	Check if c is one of those "magic values"
;	¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯



;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;!!!!!!!!!!!!!!!!!!LOOK AT ME NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
; I need to be finished
; find values for bottoms of each row of blocks,
; so we can decide if the ball's even close to hitting
; a block, otherwise, quit.






	ld a,32
	cp c
	jr z,ContinueGuy
	;sub 5	;28
	;cp c
	;jp z,ContinueGuy
	;sub 5	;23
	;cp c
	;jp z,ContinueGuy
	;sub 5	;18
	;cp c
	;jp z,ContinueGuy
	;sub 5	;13
	;cp c
	;jp z,ContinueGuy
	jp Exitmonkey
	

;okay so we can continue
;since it is at a spot where we can delete a block
;         ¯¯

;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

ContinueGuy:	
	
	




;_____________________________________________________
;		Block Collision detection
;¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
;	Inputs:
;		b - x val of ball
;		c - y val of ball
;		
;	Outputs:
;		b - x position of ball (1-10)
;		c - y position of ball (1-5)
;
;	Registers destroyed:
;		All
;
;	_____________________________________
;		       X values
;	¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
;	Input:	
;	    ballx -> b
;	Output:
;	    b ->  val from 1-10 representing
;		  x val of block to be destroyed
;	Remarks:
;		  Usually used with drawblock (d=0)
;		  Destroys a,b
	
	

	
	ld a,11		;IF b =< 11 THEN b=1
	cp b
	jp nc,bto1
	
	
	jp z,bto2
	add a,9		;20
	cp b
	jp nc,bto2
	
	jp z,bto3
	add a,9		;29
	cp b
	jp nc,bto3
	
	jp z,bto4
	add a,9		;38
	cp b
	jp nc,bto4
	
	jp z,bto5
	add a,9		;47
	cp b
	jp nc,bto5
	
	jp z,bto6
	add a,9		;56
	cp b
	jp nc,bto6
	
	jp z,bto7
	add a,9		;65
	cp b
	jp nc,bto7
	
	jp z,bto8
	add a,9		;74
	cp b
	jp nc,bto8
	
	jp z,bto9
	add a,9		;83
	cp b
	jp nc,bto9
	
	
	
	
	jp bto10
	
bto1:
	ld b,1
	jp XsAreOk
bto2:
	ld b,2
	jp XsAreOk
bto3:
	ld b,3
	jp XsAreOk	
bto4:
	ld b,4
	jp XsAreOk
bto5:
	ld b,5
	jp XsAreOk
bto6:
	ld b,6
	jp XsAreOk
bto7:
	ld b,7
	jp XsAreOk
bto8:
	ld b,8
	jp XsAreOk
bto9:
	ld b,9
	jp XsAreOk
bto10:
	ld b,10

XsAreOk:
	






;			________________
;			    Y Values
;			¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
;	Destroys all variables
;

;
;	b= 1-10
;	c= 1-5
;		
;	


	;set c value
	ld a,32
	cp c
	call z,Cto5
	sub 5	;28
	cp c
	call z,Cto4
	sub 5	;23
	cp c
	call z,Cto3
	sub 5	;18
	cp c
	call z,Cto2
	sub 5	;13
	cp c
	call z,Cto1


;____________________________________________________
;	ERASE SPRITE
;¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯

	
	;save vals
	ld a,b
	ld (blockb),a
	ld a,c
	ld (blockc),a





	ld a,5
	cp c
	jp z,row5
	dec a
	cp c
	jp z,row4
	dec a
	cp c
	jp z,row3
	dec a
	cp c
	jp z,row2
	
;now c value is no longer important

	
	
row1:
				;handle memory markers
	ld c,b			;stick c into be so we can add it to hl
	ld b,0
	ld hl,Blocks10
	jr memhand
row2:
				;handle memory markers
	ld c,b			;stick c into be so we can add it to hl
	ld b,0
	ld hl,Blocks20
	jr memhand
row3:
				;handle memory markers
	ld c,b			;stick c into be so we can add it to hl
	ld b,0
	ld hl,Blocks30
	jr memhand
row4:
				;handle memory markers
	ld c,b			;stick c into be so we can add it to hl
	ld b,0
	ld hl,Blocks40
	jr memhand
row5:
				;handle memory markers
	ld c,b			;stick c into be so we can add it to hl
	ld b,0
	ld hl,Blocks50
	jr memhand	
	
	
memhand:
	ld a,(blockb)
	cp 1
	jr z,Okiedoke
	cp 2
	jr z,Col2	
	cp 3
	jr z,Col3
	cp 4
	jr z,Col4
	cp 5
	jr z,Col5
	cp 6
	jr z,Col6
	cp 7
	jr z,Col7
	cp 8
	jr z,Col8
	cp 9
	jr z,Col9
	cp 10
	jr z,Col10
Col2:	
	inc hl
	jr Okiedoke
Col3:
	inc hl
	inc hl
	jr Okiedoke
Col4:	
	inc hl
	inc hl
	inc hl

	jr Okiedoke
Col5:
	inc hl
	inc hl
	inc hl
	inc hl
	jr Okiedoke
Col6:	
	inc hl
	inc hl
	inc hl
	inc hl
	inc hl
	jr Okiedoke
Col7:
	inc hl
	inc hl
	inc hl
	inc hl
	inc hl
	inc hl
	jr Okiedoke
Col8:	
	inc hl
	inc hl
	inc hl
	inc hl
	inc hl
	inc hl
	inc hl
	jr Okiedoke
Col9:
	inc hl
	inc hl
	inc hl
	inc hl
	inc hl
	inc hl
	inc hl
	inc hl
	jr Okiedoke
Col10:	
	inc hl
	inc hl
	inc hl
	inc hl
	inc hl
	inc hl
	inc hl
	inc hl
	inc hl
	
Okiedoke:
	
	
;____________________________________________________________________________
;		Check Value of block
;¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯	
	
	ld a,(hl)
	cp 0
	jp z,Quitmonster		;Exitmonkey
	cp 1
	call z,Erase1
	cp 0
	jr z,HappyFunTown
	cp 2
	call z,Erase2
	cp 0
	jr z,HappyFunTown
	cp 3
	call z,Erase3
	cp 0
	jr z,HappyFunTown
	cp 4
	call z,Erase4
	cp 0
	jr z,HappyFunTown
	cp 5
	call z,Erase5
	cp 0
	jr z,HappyFunTown
	cp 6
	call z,Erase6
	
	
	
HappyFunTown:
	;load vals
	ld a,0
	ld b,0
	ld c,0


	ld a,(blockb)
	ld b,a
	ld a,(blockc)
	ld c,a
	
	push bc
		ld d,0
		call drawblock
		call chgya
	pop bc
	
	
	
	
	
	
	
	ld hl,Exitcounter	;chech if exitcounter is equal to zero
	ld d,(hl)
	ld a,0
	cp d
	ret z
	jp Exitmonkey
;ram counter for block should now be erased



	
erase1:
	ld (hl),0
	;ld hl,Exitcounter
	;dec (hl)
	ld a,0
	ret
erase2:
	ld (hl),0
	;ld hl,Exitcounter
	;dec (hl)
	ld a,0
	ret
erase3:
	ld (hl),0
	;ld hl,Exitcounter
	;dec (hl)
	ld a,0
	ret
erase4:
	ld (hl),0
	;ld hl,Exitcounter
	;dec (hl)
	ld a,0
	ret
erase5:
	ld (hl),0
	;ld hl,Exitcounter
	;dec (hl)
	ld a,0
	ret
erase6:
	ld (hl),0
	;ld hl,Exitcounter
	;dec (hl)
	ld a,0
	ret






Cto1:
	ld c,1
	ret
Cto2:
	ld c,2
	ret
Cto3:
	ld c,3
	ret
Cto4:
	ld c,4
	ret
Cto5:
	ld c,5
	ret
	
chgya:
	ld a,(balld)
	cp 1
	call z,dirtotrea
	cp 2
	call z,dirtofora
	cp 3
	call z,dirtoonea
	cp 4
	call z,dirtotwoa
	ret	
		
dirtoonea:
	ld a,1
	ld (balld),a
	ret

dirtotwoa:
	ld a,2
	ld (balld),a
	ret
	
dirtotrea:
	ld a,3
	ld (balld),a
	ret
	
dirtofora:
	ld a,4
	ld (balld),a
	ret
 

QuitMonster:	
	call quittoshell
	
	
	
;exit monkey pointer

Exitmonkey:
	
	
;.end
;END